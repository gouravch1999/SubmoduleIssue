/****************************************************************************
 * COPYRIGHT VITESCO TECHNOLOGIES GROUP AG (EXCLUSIVE RIGHTS) 
 * Confidential
 * 
 * The reproduction, transmission or use of this document or its
 * contents is not permitted without express written authority.
 * Offenders will be liable for damages. All rights, including rights
 * created by patent grant or registration of a utility model or design,
 * are reserved.
 *---------------------------------------------------------------------------
 * 
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 * !!! This file is generated by Signal Mapper (SIMA) Code-Generator !!!
 * !!! Do NOT modify this file manually                            !!!
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 * 
 * Purpose:    PL Hook Header for MCR
 * 
 * Processor:  independent
 * Tool chain: 
 *    CG-Version:        6.2.0
 *    Schema-Version:    1.18.0
 *    Generation-Date:   29.08.2024  16:59:16  
 *    Generated by user: uiv00534
 * Filename:   $Workfile$
 * Revision:   $Revision: 1.1 $
 * Author:     $Author: Zhang Yi (uiv00534) (uiv00534) $
 * Date:       $Date: 2024/09/03 03:20:48CEST $
 * Changes:    $Log: ipl_hook_tx_prim_mcr.h  $
 * Changes:    Revision 1.1 2024/09/03 03:20:48CEST Zhang Yi (uiv00534) (uiv00534) 
 * Changes:    Initial revision
 * Changes:    Member added to project /ES/FS/0G/H0D/0A/bsw/intc/intc_sigcv_mc1/i/project.pj
 * 
****************************************************************************/
#ifndef IPL_HOOK_TX_PRIM_MCR_H
#define IPL_HOOK_TX_PRIM_MCR_H

#undef ACTION_ID_NONE
#undef RUNNABLE_ID_NONE
#define ACTION_ID_NONE 0
#define RUNNABLE_ID_NONE 0

#define ACTION_ID_PL_Cvt_EDU1_activeDischFeatEn 5
#define ACTION_ID_PL_Cvt_EDU1_clutchState 6
#define ACTION_ID_PL_Cvt_EDU1_comStatusPrimary 7
#define ACTION_ID_PL_Cvt_EDU1_comStatusSecondary 8
#define ACTION_ID_PL_Cvt_EDU1_currentDc 9
#define ACTION_ID_PL_Cvt_EDU1_igbtTemp 10
#define ACTION_ID_PL_Cvt_EDU1_inverterAppBuildType 11
#define ACTION_ID_PL_Cvt_EDU1_inverterAppChecksum 12
#define ACTION_ID_PL_Cvt_EDU1_inverterAppInfoMultiplexer_0 13
#define ACTION_ID_PL_Cvt_EDU1_inverterAppInfoMultiplexer_1 14
#define ACTION_ID_PL_Cvt_EDU1_inverterAppInfoMultiplexer_2 15
#define ACTION_ID_PL_Cvt_EDU1_inverterAppVersionMajor 16
#define ACTION_ID_PL_Cvt_EDU1_inverterAppVersionMinor 17
#define ACTION_ID_PL_Cvt_EDU1_inverterAppVersionRev 18
#define ACTION_ID_PL_Cvt_EDU1_inverterBootInfoVersionRev 19
#define ACTION_ID_PL_Cvt_EDU1_inverterBootInfoVersnMajor 20
#define ACTION_ID_PL_Cvt_EDU1_inverterBootInfoVersnMinor 21
#define ACTION_ID_PL_Cvt_EDU1_inverterComponentId 22
#define ACTION_ID_PL_Cvt_EDU1_inverterHardwareId 23
#define ACTION_ID_PL_Cvt_EDU1_inverterInstanceId 24
#define ACTION_ID_PL_Cvt_EDU1_inverterState 25
#define ACTION_ID_PL_Cvt_EDU1_nmAbleToSleep 26
#define ACTION_ID_PL_Cvt_EDU1_nmSleepError 27
#define ACTION_ID_PL_Cvt_EDU1_nmState 28
#define ACTION_ID_PL_Cvt_EDU1_outputShaftTorque 29
#define ACTION_ID_PL_Cvt_EDU1_outputShaftTorqueLimMax 30
#define ACTION_ID_PL_Cvt_EDU1_outputShaftTorqueLimMin 31
#define ACTION_ID_PL_Cvt_EDU1_outputShaftTorqueValid 32
#define ACTION_ID_PL_Cvt_EDU1_rotorPosition 33
#define ACTION_ID_PL_Cvt_EDU1_rotorPositionValid 34
#define ACTION_ID_PL_Cvt_EDU1_rotorSpeed 35
#define ACTION_ID_PL_Cvt_EDU1_rotorSpeedValid 36
#define ACTION_ID_PL_Cvt_EDU1_rotorTemp 37
#define ACTION_ID_PL_Cvt_EDU1_statorTemp 38
#define ACTION_ID_PL_Cvt_EduPrim_EDU1_heatPower 39
#define ACTION_ID_PL_Cvt_EduPrim_EDU1_heatPowerLimit 40
#define ACTION_ID_PL_Cvt_EduPrim_EDU_a000_to_a031 41
#define ACTION_ID_PL_Cvt_EduPrim_EDU_a032_to_a059 42
#define ACTION_ID_PL_Cvt_EduPrim_EDU_alertStatusMult_0 43
#define ACTION_ID_PL_Cvt_EduPrim_EDU_voltageDc 44
#endif

#if !(defined RUNNABLE_ID || defined ACTION_ID)
#error "No RUNNABLE_ID or ACTION_ID defined"
#endif
#ifndef RUNNABLE_ID
#define RUNNABLE_ID RUNNABLE_ID_NONE
#endif
#ifndef ACTION_ID
#define ACTION_ID ACTION_ID_NONE
#endif


/* Getters and setters for everyone */
#ifdef BNmAbleToSleep
  #ifndef GET_bNmAbleToSleep
    #define GET_bNmAbleToSleep() (BNmAbleToSleep())
  #endif
#else
  #ifndef GET_bNmAbleToSleep
    #define GET_bNmAbleToSleep() (bNmAbleToSleep)
  #endif
#endif
#ifdef ECanNmState
  #ifndef GET_eCanNmState
    #define GET_eCanNmState() (ECanNmState())
  #endif
#else
  #ifndef GET_eCanNmState
    #define GET_eCanNmState() (eCanNmState)
  #endif
#endif
#ifdef Ecu_id_sw_idx
  #ifndef GET_ecu_id_sw_idx
    #define GET_ecu_id_sw_idx(i) (Ecu_id_sw_idx(i))
  #endif
#else
  #ifndef GET_ecu_id_sw_idx
    #define GET_ecu_id_sw_idx(i) (ecu_id_sw_idx[i])
  #endif
#endif
#ifdef F32AngRotorEstim
  #ifndef GET_f32AngRotorEstim
    #define GET_f32AngRotorEstim() (1 /* F32AngRotorEstim() */)
  #endif
#else
  #ifndef GET_f32AngRotorEstim
    #define GET_f32AngRotorEstim() 1 /* F32AngRotorEstim() */)
  #endif
#endif
#ifdef F32NRotorLpfSlow
  #ifndef GET_f32NRotorLpfSlow
    #define GET_f32NRotorLpfSlow() (1 /* F32NRotorLpfSlow() */)
  #endif
#else
  #ifndef GET_f32NRotorLpfSlow
    #define GET_f32NRotorLpfSlow() (1 /* F32NRotorLpfSlow() */)
  #endif
#endif
#ifdef HwSample
  #ifndef GET_HwSample
    #define GET_HwSample() (HwSample())
  #endif
#else
  #ifndef GET_HwSample
    #define GET_HwSample() (HwSample)
  #endif
#endif
#ifdef Pl_AcvDchaSts
  #ifndef GET_Pl_AcvDchaSts
    #define GET_Pl_AcvDchaSts() (Pl_AcvDchaSts())
  #endif
#else
  #ifndef GET_Pl_AcvDchaSts
    #define GET_Pl_AcvDchaSts() (Pl_AcvDchaSts)
  #endif
#endif
#ifdef Pl_CluAxleSt
  #ifndef GET_Pl_CluAxleSt
    #define GET_Pl_CluAxleSt() (Pl_CluAxleSt())
  #endif
#else
  #ifndef GET_Pl_CluAxleSt
    #define GET_Pl_CluAxleSt() (Pl_CluAxleSt)
  #endif
#endif
#ifdef Pl_EmRotorTEstimd
  #ifndef GET_Pl_EmRotorTEstimd
    #define GET_Pl_EmRotorTEstimd() (Pl_EmRotorTEstimd())
  #endif
#else
  #ifndef GET_Pl_EmRotorTEstimd
    #define GET_Pl_EmRotorTEstimd() (Pl_EmRotorTEstimd)
  #endif
#endif
#ifdef Pl_EmStatorTHotSpotEstimd
  #ifndef GET_Pl_EmStatorTHotSpotEstimd
    #define GET_Pl_EmStatorTHotSpotEstimd() (Pl_EmStatorTHotSpotEstimd())
  #endif
#else
  #ifndef GET_Pl_EmStatorTHotSpotEstimd
    #define GET_Pl_EmStatorTHotSpotEstimd() (Pl_EmStatorTHotSpotEstimd)
  #endif
#endif
#ifdef Pl_HvDcIEstimd
  #ifndef GET_Pl_HvDcIEstimd
    #define GET_Pl_HvDcIEstimd() (Pl_HvDcIEstimd())
  #endif
#else
  #ifndef GET_Pl_HvDcIEstimd
    #define GET_Pl_HvDcIEstimd() (Pl_HvDcIEstimd)
  #endif
#endif
#ifdef Pl_HvDcUMeasd
  #ifndef GET_Pl_HvDcUMeasd
    #define GET_Pl_HvDcUMeasd() (Pl_HvDcUMeasd())
  #endif
#else
  #ifndef GET_Pl_HvDcUMeasd
    #define GET_Pl_HvDcUMeasd() (Pl_HvDcUMeasd)
  #endif
#endif
#ifdef Pl_LvStPosnRotorVld
  #ifndef GET_Pl_LvStPosnRotorVld
    #define GET_Pl_LvStPosnRotorVld() (Pl_LvStPosnRotorVld())
  #endif
#else
  #ifndef GET_Pl_LvStPosnRotorVld
    #define GET_Pl_LvStPosnRotorVld() (Pl_LvStPosnRotorVld)
  #endif
#endif
#ifdef Pl_PeIgbtDiodeT
  #ifndef GET_Pl_PeIgbtDiodeT
    #define GET_Pl_PeIgbtDiodeT() (Pl_PeIgbtDiodeT())
  #endif
#else
  #ifndef GET_Pl_PeIgbtDiodeT
    #define GET_Pl_PeIgbtDiodeT() (Pl_PeIgbtDiodeT)
  #endif
#endif
#ifdef Pl_PeModeAct
  #ifndef GET_Pl_PeModeAct
    #define GET_Pl_PeModeAct() (Pl_PeModeAct())
  #endif
#else
  #ifndef GET_Pl_PeModeAct
    #define GET_Pl_PeModeAct() (Pl_PeModeAct)
  #endif
#endif
#ifdef Pl_PwrLossElInvt
  #ifndef GET_Pl_PwrLossElInvt
    #define GET_Pl_PwrLossElInvt() (Pl_PwrLossElInvt())
  #endif
#else
  #ifndef GET_Pl_PwrLossElInvt
    #define GET_Pl_PwrLossElInvt() (Pl_PwrLossElInvt)
  #endif
#endif
#ifdef Pl_PwrLossInvtMaxEstim
  #ifndef GET_Pl_PwrLossInvtMaxEstim
    #define GET_Pl_PwrLossInvtMaxEstim() (Pl_PwrLossInvtMaxEstim())
  #endif
#else
  #ifndef GET_Pl_PwrLossInvtMaxEstim
    #define GET_Pl_PwrLossInvtMaxEstim() (Pl_PwrLossInvtMaxEstim)
  #endif
#endif
#ifdef Pl_WhlTqEstimdAct
  #ifndef GET_Pl_WhlTqEstimdAct
    #define GET_Pl_WhlTqEstimdAct() (Pl_WhlTqEstimdAct())
  #endif
#else
  #ifndef GET_Pl_WhlTqEstimdAct
    #define GET_Pl_WhlTqEstimdAct() (Pl_WhlTqEstimdAct)
  #endif
#endif
#ifdef Pl_WhlTqMaxEstimdLimAct
  #ifndef GET_Pl_WhlTqMaxEstimdLimAct
    #define GET_Pl_WhlTqMaxEstimdLimAct() (Pl_WhlTqMaxEstimdLimAct())
  #endif
#else
  #ifndef GET_Pl_WhlTqMaxEstimdLimAct
    #define GET_Pl_WhlTqMaxEstimdLimAct() (Pl_WhlTqMaxEstimdLimAct)
  #endif
#endif
#ifdef Pl_WhlTqMinEstimdLimAct
  #ifndef GET_Pl_WhlTqMinEstimdLimAct
    #define GET_Pl_WhlTqMinEstimdLimAct() (Pl_WhlTqMinEstimdLimAct())
  #endif
#else
  #ifndef GET_Pl_WhlTqMinEstimdLimAct
    #define GET_Pl_WhlTqMinEstimdLimAct() (Pl_WhlTqMinEstimdLimAct)
  #endif
#endif
#ifdef U32AlertStatusBits_high
  #ifndef GET_u32AlertStatusBits_high
    #define GET_u32AlertStatusBits_high() (U32AlertStatusBits_high())
  #endif
#else
  #ifndef GET_u32AlertStatusBits_high
    #define GET_u32AlertStatusBits_high() (u32AlertStatusBits_high)
  #endif
#endif
#ifdef U32AlertStatusBits_low
  #ifndef GET_u32AlertStatusBits_low
    #define GET_u32AlertStatusBits_low() (U32AlertStatusBits_low())
  #endif
#else
  #ifndef GET_u32AlertStatusBits_low
    #define GET_u32AlertStatusBits_low() (u32AlertStatusBits_low)
  #endif
#endif
#ifdef U32InverterAppChecksum
  #ifndef GET_u32InverterAppChecksum
    #define GET_u32InverterAppChecksum() (U32InverterAppChecksum())
  #endif
#else
  #ifndef GET_u32InverterAppChecksum
    #define GET_u32InverterAppChecksum() (u32InverterAppChecksum)
  #endif
#endif
#ifdef U8AlertStatusMult
  #ifndef GET_u8AlertStatusMult
    #define GET_u8AlertStatusMult() (U8AlertStatusMult())
  #endif
#else
  #ifndef GET_u8AlertStatusMult
    #define GET_u8AlertStatusMult() (u8AlertStatusMult)
  #endif
#endif
#ifdef U8ComStatusPrimary
  #ifndef GET_u8ComStatusPrimary
    #define GET_u8ComStatusPrimary() (1 /* U8ComStatusPrimary() */)
  #endif
#else
  #ifndef GET_u8ComStatusPrimary
    #define GET_u8ComStatusPrimary() (1 /* U8ComStatusPrimary() */)
  #endif
#endif
#ifdef U8ComStatusSecondary
  #ifndef GET_u8ComStatusSecondary
    #define GET_u8ComStatusSecondary() (1 /* U8ComStatusSecondary() */)
  #endif
#else
  #ifndef GET_u8ComStatusSecondary
    #define GET_u8ComStatusSecondary() 1 /* U8ComStatusSecondary() */)
  #endif
#endif
#ifdef U8InverterBootInfoVersionRev
  #ifndef GET_u8InverterBootInfoVersionRev
    #define GET_u8InverterBootInfoVersionRev() (U8InverterBootInfoVersionRev())
  #endif
#else
  #ifndef GET_u8InverterBootInfoVersionRev
    #define GET_u8InverterBootInfoVersionRev() (u8InverterBootInfoVersionRev)
  #endif
#endif
#ifdef U8InverterBootInfoVersnMajor
  #ifndef GET_u8InverterBootInfoVersnMajor
    #define GET_u8InverterBootInfoVersnMajor() (U8InverterBootInfoVersnMajor())
  #endif
#else
  #ifndef GET_u8InverterBootInfoVersnMajor
    #define GET_u8InverterBootInfoVersnMajor() (u8InverterBootInfoVersnMajor)
  #endif
#endif
#ifdef U8InverterBootInfoVersnMinor
  #ifndef GET_u8InverterBootInfoVersnMinor
    #define GET_u8InverterBootInfoVersnMinor() (U8InverterBootInfoVersnMinor())
  #endif
#else
  #ifndef GET_u8InverterBootInfoVersnMinor
    #define GET_u8InverterBootInfoVersnMinor() (u8InverterBootInfoVersnMinor)
  #endif
#endif
#ifdef U8PostbuildVariantSelected
  #ifndef GET_u8PostbuildVariantSelected
    #define GET_u8PostbuildVariantSelected() (U8PostbuildVariantSelected())
  #endif
#else
  #ifndef GET_u8PostbuildVariantSelected
    #define GET_u8PostbuildVariantSelected() (u8PostbuildVariantSelected)
  #endif
#endif

#undef RUNNABLE_ID
#define RUNNABLE_ID RUNNABLE_ID_NONE
#undef ACTION_ID
#define ACTION_ID ACTION_ID_NONE

#if !((RUNNABLE_ID == RUNNABLE_ID_NONE) && (ACTION_ID == RUNNABLE_ID_NONE))
#error "Illegal RUNNABLE_ID or ACTION_ID found"
#endif


